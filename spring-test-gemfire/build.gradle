plugins {
  id 'java-library'
  id "io.freefair.lombok" version "6.6.1"
  id 'dependency-constraints'
	id 'gemfire-repo-artifact-publishing'
  id 'com.netflix.nebula.optional-base' version '8.0.0' // if you want optional-base
}


description = "Spring Test Framework for VMware GemFire 9.15 and Spring Data 2.7"

project.ext.set("pomProjectLongName", description)
project.ext.set("pomProjectArtifactName", "spring-test-gemfire-${gemfireBaseVersion}-2.7")
project.ext.set("pomProjectDescription", description)

java {
  withJavadocJar()
  withSourcesJar()
}

javadoc{
  failOnError=false
}

dependencies {

  api "edu.umd.cs.mtc:multithreadedtc:1.01"
  api "junit:junit"
  api "org.assertj:assertj-core"
  api "org.mockito:mockito-core"
  api "org.projectlombok:lombok"
  api "org.springframework:spring-test:5.3.31"
  compileOnly "com.vmware.gemfire:spring-data-2.7-gemfire-$gemfireBaseVersion:$springDataGemFireVersion"

  compileOnly "com.vmware.gemfire:geode-core:$gemfireVersion"
  compileOnly "com.vmware.gemfire:geode-logging:$gemfireVersion"
  compileOnly "com.vmware.gemfire:geode-cq:$gemfireVersion"
  compileOnly "com.vmware.gemfire:geode-wan:$gemfireVersion"
  compileOnly "com.vmware.gemfire:geode-gfsh:$gemfireVersion"
  compileOnly "com.vmware.gemfire:geode-tcp-server:$gemfireVersion"
  compileOnly "com.vmware.gemfire:geode-deployment-legacy:$gemfireVersion"
  compileOnly "com.vmware.gemfire:geode-lucene:$gemfireVersion"

  compileOnly "com.google.code.findbugs:jsr305:$findbugsVersion"

  implementation "ch.qos.logback:logback-classic", optional

  compileOnly('org.springframework.boot:spring-boot-starter') {
    exclude group: "org.springframework.boot", module: "spring-boot-starter-logging";
  }

  testImplementation "com.vmware.gemfire:spring-data-2.7-gemfire-$gemfireBaseVersion:$springDataGemFireVersion"

  testImplementation "com.vmware.gemfire:geode-core:$gemfireVersion"
  testImplementation "com.vmware.gemfire:geode-logging:$gemfireVersion"
  testImplementation "com.vmware.gemfire:geode-cq:$gemfireVersion"
  testImplementation "com.vmware.gemfire:geode-wan:$gemfireVersion"
  testImplementation "com.vmware.gemfire:geode-gfsh:$gemfireVersion"
  testImplementation "com.vmware.gemfire:geode-tcp-server:$gemfireVersion"
  testImplementation "com.vmware.gemfire:geode-deployment-legacy:$gemfireVersion"
  testImplementation "com.vmware.gemfire:geode-lucene:$gemfireVersion"
}

repositories {
  def additionalMavenRepoURLs = project.ext.get('additionalMavenRepoURLs')
  if (!additionalMavenRepoURLs.isEmpty() && !additionalMavenRepoURLs.isBlank()) {
    additionalMavenRepoURLs.split(',').each {
      project.getRepositories()
              .maven(mavenRepository -> {
                mavenRepository.setUrl(uri(it.toString()))
              })
    }
  }
}
